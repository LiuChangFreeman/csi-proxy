// Code generated by csi-proxy-api-gen. DO NOT EDIT.

package v1beta1

import (
	"context"

	"github.com/kubernetes-csi/csi-proxy/client/api/disk/v1beta1"
	"github.com/kubernetes-csi/csi-proxy/client/apiversion"
	"github.com/kubernetes-csi/csi-proxy/pkg/server/disk/impl"
	"google.golang.org/grpc"
)

var version = apiversion.NewVersionOrPanic("v1beta1")

type versionedAPI struct {
	apiGroupServer impl.ServerInterface
}

func NewVersionedServer(apiGroupServer impl.ServerInterface) impl.VersionedAPI {
	return &versionedAPI{
		apiGroupServer: apiGroupServer,
	}
}

func (s *versionedAPI) Register(grpcServer *grpc.Server) {
	v1beta1.RegisterDiskServer(grpcServer, s)
}

func (s *versionedAPI) DiskStats(context context.Context, versionedRequest *v1beta1.DiskStatsRequest) (*v1beta1.DiskStatsResponse, error) {
	request := &impl.DiskStatsRequest{}
	if err := Convert_v1beta1_DiskStatsRequest_To_impl_DiskStatsRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.DiskStats(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta1.DiskStatsResponse{}
	if err := Convert_impl_DiskStatsResponse_To_v1beta1_DiskStatsResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) ListDiskIDs(context context.Context, versionedRequest *v1beta1.ListDiskIDsRequest) (*v1beta1.ListDiskIDsResponse, error) {
	request := &impl.ListDiskIDsRequest{}
	if err := Convert_v1beta1_ListDiskIDsRequest_To_impl_ListDiskIDsRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.ListDiskIDs(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta1.ListDiskIDsResponse{}
	if err := Convert_impl_ListDiskIDsResponse_To_v1beta1_ListDiskIDsResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) ListDiskLocations(context context.Context, versionedRequest *v1beta1.ListDiskLocationsRequest) (*v1beta1.ListDiskLocationsResponse, error) {
	request := &impl.ListDiskLocationsRequest{}
	if err := Convert_v1beta1_ListDiskLocationsRequest_To_impl_ListDiskLocationsRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.ListDiskLocations(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta1.ListDiskLocationsResponse{}
	if err := Convert_impl_ListDiskLocationsResponse_To_v1beta1_ListDiskLocationsResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) PartitionDisk(context context.Context, versionedRequest *v1beta1.PartitionDiskRequest) (*v1beta1.PartitionDiskResponse, error) {
	request := &impl.PartitionDiskRequest{}
	if err := Convert_v1beta1_PartitionDiskRequest_To_impl_PartitionDiskRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.PartitionDisk(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta1.PartitionDiskResponse{}
	if err := Convert_impl_PartitionDiskResponse_To_v1beta1_PartitionDiskResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) Rescan(context context.Context, versionedRequest *v1beta1.RescanRequest) (*v1beta1.RescanResponse, error) {
	request := &impl.RescanRequest{}
	if err := Convert_v1beta1_RescanRequest_To_impl_RescanRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.Rescan(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta1.RescanResponse{}
	if err := Convert_impl_RescanResponse_To_v1beta1_RescanResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}
