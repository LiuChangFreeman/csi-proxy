// Code generated by csi-proxy-api-gen. DO NOT EDIT.

package v1beta2

import (
	"context"

	"github.com/kubernetes-csi/csi-proxy/client/api/disk/v1beta2"
	"github.com/kubernetes-csi/csi-proxy/client/apiversion"
	"github.com/kubernetes-csi/csi-proxy/pkg/server/disk/impl"
	"google.golang.org/grpc"
)

var version = apiversion.NewVersionOrPanic("v1beta2")

type versionedAPI struct {
	apiGroupServer impl.ServerInterface
}

func NewVersionedServer(apiGroupServer impl.ServerInterface) impl.VersionedAPI {
	return &versionedAPI{
		apiGroupServer: apiGroupServer,
	}
}

func (s *versionedAPI) Register(grpcServer *grpc.Server) {
	v1beta2.RegisterDiskServer(grpcServer, s)
}

func (s *versionedAPI) DiskStats(context context.Context, versionedRequest *v1beta2.DiskStatsRequest) (*v1beta2.DiskStatsResponse, error) {
	request := &impl.DiskStatsRequest{}
	if err := Convert_v1beta2_DiskStatsRequest_To_impl_DiskStatsRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.DiskStats(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta2.DiskStatsResponse{}
	if err := Convert_impl_DiskStatsResponse_To_v1beta2_DiskStatsResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) GetAttachState(context context.Context, versionedRequest *v1beta2.GetAttachStateRequest) (*v1beta2.GetAttachStateResponse, error) {
	request := &impl.GetAttachStateRequest{}
	if err := Convert_v1beta2_GetAttachStateRequest_To_impl_GetAttachStateRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.GetAttachState(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta2.GetAttachStateResponse{}
	if err := Convert_impl_GetAttachStateResponse_To_v1beta2_GetAttachStateResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) ListDiskIDs(context context.Context, versionedRequest *v1beta2.ListDiskIDsRequest) (*v1beta2.ListDiskIDsResponse, error) {
	request := &impl.ListDiskIDsRequest{}
	if err := Convert_v1beta2_ListDiskIDsRequest_To_impl_ListDiskIDsRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.ListDiskIDs(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta2.ListDiskIDsResponse{}
	if err := Convert_impl_ListDiskIDsResponse_To_v1beta2_ListDiskIDsResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) ListDiskLocations(context context.Context, versionedRequest *v1beta2.ListDiskLocationsRequest) (*v1beta2.ListDiskLocationsResponse, error) {
	request := &impl.ListDiskLocationsRequest{}
	if err := Convert_v1beta2_ListDiskLocationsRequest_To_impl_ListDiskLocationsRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.ListDiskLocations(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta2.ListDiskLocationsResponse{}
	if err := Convert_impl_ListDiskLocationsResponse_To_v1beta2_ListDiskLocationsResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) PartitionDisk(context context.Context, versionedRequest *v1beta2.PartitionDiskRequest) (*v1beta2.PartitionDiskResponse, error) {
	request := &impl.PartitionDiskRequest{}
	if err := Convert_v1beta2_PartitionDiskRequest_To_impl_PartitionDiskRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.PartitionDisk(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta2.PartitionDiskResponse{}
	if err := Convert_impl_PartitionDiskResponse_To_v1beta2_PartitionDiskResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) Rescan(context context.Context, versionedRequest *v1beta2.RescanRequest) (*v1beta2.RescanResponse, error) {
	request := &impl.RescanRequest{}
	if err := Convert_v1beta2_RescanRequest_To_impl_RescanRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.Rescan(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta2.RescanResponse{}
	if err := Convert_impl_RescanResponse_To_v1beta2_RescanResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) SetAttachState(context context.Context, versionedRequest *v1beta2.SetAttachStateRequest) (*v1beta2.SetAttachStateResponse, error) {
	request := &impl.SetAttachStateRequest{}
	if err := Convert_v1beta2_SetAttachStateRequest_To_impl_SetAttachStateRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.SetAttachState(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta2.SetAttachStateResponse{}
	if err := Convert_impl_SetAttachStateResponse_To_v1beta2_SetAttachStateResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}
