// Code generated by csi-proxy-api-gen. DO NOT EDIT.

package v1beta1

import (
	"context"

	"github.com/kubernetes-csi/csi-proxy/client/api/volume/v1beta1"
	"github.com/kubernetes-csi/csi-proxy/client/apiversion"
	"github.com/kubernetes-csi/csi-proxy/pkg/server/volume/impl"
	"google.golang.org/grpc"
)

var version = apiversion.NewVersionOrPanic("v1beta1")

type versionedAPI struct {
	apiGroupServer impl.ServerInterface
}

func NewVersionedServer(apiGroupServer impl.ServerInterface) impl.VersionedAPI {
	return &versionedAPI{
		apiGroupServer: apiGroupServer,
	}
}

func (s *versionedAPI) Register(grpcServer *grpc.Server) {
	v1beta1.RegisterVolumeServer(grpcServer, s)
}

func (s *versionedAPI) DismountVolume(context context.Context, versionedRequest *v1beta1.DismountVolumeRequest) (*v1beta1.DismountVolumeResponse, error) {
	request := &impl.DismountVolumeRequest{}
	if err := Convert_v1beta1_DismountVolumeRequest_To_impl_DismountVolumeRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.DismountVolume(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta1.DismountVolumeResponse{}
	if err := Convert_impl_DismountVolumeResponse_To_v1beta1_DismountVolumeResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) FormatVolume(context context.Context, versionedRequest *v1beta1.FormatVolumeRequest) (*v1beta1.FormatVolumeResponse, error) {
	request := &impl.FormatVolumeRequest{}
	if err := Convert_v1beta1_FormatVolumeRequest_To_impl_FormatVolumeRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.FormatVolume(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta1.FormatVolumeResponse{}
	if err := Convert_impl_FormatVolumeResponse_To_v1beta1_FormatVolumeResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) GetVolumeDiskNumber(context context.Context, versionedRequest *v1beta1.VolumeDiskNumberRequest) (*v1beta1.VolumeDiskNumberResponse, error) {
	request := &impl.VolumeDiskNumberRequest{}
	if err := Convert_v1beta1_VolumeDiskNumberRequest_To_impl_VolumeDiskNumberRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.GetVolumeDiskNumber(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta1.VolumeDiskNumberResponse{}
	if err := Convert_impl_VolumeDiskNumberResponse_To_v1beta1_VolumeDiskNumberResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) GetVolumeIDFromMount(context context.Context, versionedRequest *v1beta1.VolumeIDFromMountRequest) (*v1beta1.VolumeIDFromMountResponse, error) {
	request := &impl.VolumeIDFromMountRequest{}
	if err := Convert_v1beta1_VolumeIDFromMountRequest_To_impl_VolumeIDFromMountRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.GetVolumeIDFromMount(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta1.VolumeIDFromMountResponse{}
	if err := Convert_impl_VolumeIDFromMountResponse_To_v1beta1_VolumeIDFromMountResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) IsVolumeFormatted(context context.Context, versionedRequest *v1beta1.IsVolumeFormattedRequest) (*v1beta1.IsVolumeFormattedResponse, error) {
	request := &impl.IsVolumeFormattedRequest{}
	if err := Convert_v1beta1_IsVolumeFormattedRequest_To_impl_IsVolumeFormattedRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.IsVolumeFormatted(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta1.IsVolumeFormattedResponse{}
	if err := Convert_impl_IsVolumeFormattedResponse_To_v1beta1_IsVolumeFormattedResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) ListVolumesOnDisk(context context.Context, versionedRequest *v1beta1.ListVolumesOnDiskRequest) (*v1beta1.ListVolumesOnDiskResponse, error) {
	request := &impl.ListVolumesOnDiskRequest{}
	if err := Convert_v1beta1_ListVolumesOnDiskRequest_To_impl_ListVolumesOnDiskRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.ListVolumesOnDisk(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta1.ListVolumesOnDiskResponse{}
	if err := Convert_impl_ListVolumesOnDiskResponse_To_v1beta1_ListVolumesOnDiskResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) MountVolume(context context.Context, versionedRequest *v1beta1.MountVolumeRequest) (*v1beta1.MountVolumeResponse, error) {
	request := &impl.MountVolumeRequest{}
	if err := Convert_v1beta1_MountVolumeRequest_To_impl_MountVolumeRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.MountVolume(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta1.MountVolumeResponse{}
	if err := Convert_impl_MountVolumeResponse_To_v1beta1_MountVolumeResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) ResizeVolume(context context.Context, versionedRequest *v1beta1.ResizeVolumeRequest) (*v1beta1.ResizeVolumeResponse, error) {
	request := &impl.ResizeVolumeRequest{}
	if err := Convert_v1beta1_ResizeVolumeRequest_To_impl_ResizeVolumeRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.ResizeVolume(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta1.ResizeVolumeResponse{}
	if err := Convert_impl_ResizeVolumeResponse_To_v1beta1_ResizeVolumeResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) VolumeStats(context context.Context, versionedRequest *v1beta1.VolumeStatsRequest) (*v1beta1.VolumeStatsResponse, error) {
	request := &impl.VolumeStatsRequest{}
	if err := Convert_v1beta1_VolumeStatsRequest_To_impl_VolumeStatsRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.VolumeStats(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta1.VolumeStatsResponse{}
	if err := Convert_impl_VolumeStatsResponse_To_v1beta1_VolumeStatsResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}
