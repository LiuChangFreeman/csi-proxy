// Code generated by csi-proxy-api-gen. DO NOT EDIT.

package v1beta3

import (
	"context"

	"github.com/kubernetes-csi/csi-proxy/client/api/volume/v1beta3"
	"github.com/kubernetes-csi/csi-proxy/client/apiversion"
	"github.com/kubernetes-csi/csi-proxy/pkg/server/volume/impl"
	"google.golang.org/grpc"
)

var version = apiversion.NewVersionOrPanic("v1beta3")

type versionedAPI struct {
	apiGroupServer impl.ServerInterface
}

func NewVersionedServer(apiGroupServer impl.ServerInterface) impl.VersionedAPI {
	return &versionedAPI{
		apiGroupServer: apiGroupServer,
	}
}

func (s *versionedAPI) Register(grpcServer *grpc.Server) {
	v1beta3.RegisterVolumeServer(grpcServer, s)
}

func (s *versionedAPI) FormatVolume(context context.Context, versionedRequest *v1beta3.FormatVolumeRequest) (*v1beta3.FormatVolumeResponse, error) {
	request := &impl.FormatVolumeRequest{}
	if err := Convert_v1beta3_FormatVolumeRequest_To_impl_FormatVolumeRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.FormatVolume(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta3.FormatVolumeResponse{}
	if err := Convert_impl_FormatVolumeResponse_To_v1beta3_FormatVolumeResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) GetDiskNumberFromVolumeID(context context.Context, versionedRequest *v1beta3.GetDiskNumberFromVolumeIDRequest) (*v1beta3.GetDiskNumberFromVolumeIDResponse, error) {
	request := &impl.GetDiskNumberFromVolumeIDRequest{}
	if err := Convert_v1beta3_GetDiskNumberFromVolumeIDRequest_To_impl_GetDiskNumberFromVolumeIDRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.GetDiskNumberFromVolumeID(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta3.GetDiskNumberFromVolumeIDResponse{}
	if err := Convert_impl_GetDiskNumberFromVolumeIDResponse_To_v1beta3_GetDiskNumberFromVolumeIDResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) GetVolumeIDFromTargetPath(context context.Context, versionedRequest *v1beta3.GetVolumeIDFromTargetPathRequest) (*v1beta3.GetVolumeIDFromTargetPathResponse, error) {
	request := &impl.GetVolumeIDFromTargetPathRequest{}
	if err := Convert_v1beta3_GetVolumeIDFromTargetPathRequest_To_impl_GetVolumeIDFromTargetPathRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.GetVolumeIDFromTargetPath(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta3.GetVolumeIDFromTargetPathResponse{}
	if err := Convert_impl_GetVolumeIDFromTargetPathResponse_To_v1beta3_GetVolumeIDFromTargetPathResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) GetVolumeStats(context context.Context, versionedRequest *v1beta3.GetVolumeStatsRequest) (*v1beta3.GetVolumeStatsResponse, error) {
	request := &impl.GetVolumeStatsRequest{}
	if err := Convert_v1beta3_GetVolumeStatsRequest_To_impl_GetVolumeStatsRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.GetVolumeStats(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta3.GetVolumeStatsResponse{}
	if err := Convert_impl_GetVolumeStatsResponse_To_v1beta3_GetVolumeStatsResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) IsVolumeFormatted(context context.Context, versionedRequest *v1beta3.IsVolumeFormattedRequest) (*v1beta3.IsVolumeFormattedResponse, error) {
	request := &impl.IsVolumeFormattedRequest{}
	if err := Convert_v1beta3_IsVolumeFormattedRequest_To_impl_IsVolumeFormattedRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.IsVolumeFormatted(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta3.IsVolumeFormattedResponse{}
	if err := Convert_impl_IsVolumeFormattedResponse_To_v1beta3_IsVolumeFormattedResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) ListVolumesOnDisk(context context.Context, versionedRequest *v1beta3.ListVolumesOnDiskRequest) (*v1beta3.ListVolumesOnDiskResponse, error) {
	request := &impl.ListVolumesOnDiskRequest{}
	if err := Convert_v1beta3_ListVolumesOnDiskRequest_To_impl_ListVolumesOnDiskRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.ListVolumesOnDisk(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta3.ListVolumesOnDiskResponse{}
	if err := Convert_impl_ListVolumesOnDiskResponse_To_v1beta3_ListVolumesOnDiskResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) MountVolume(context context.Context, versionedRequest *v1beta3.MountVolumeRequest) (*v1beta3.MountVolumeResponse, error) {
	request := &impl.MountVolumeRequest{}
	if err := Convert_v1beta3_MountVolumeRequest_To_impl_MountVolumeRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.MountVolume(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta3.MountVolumeResponse{}
	if err := Convert_impl_MountVolumeResponse_To_v1beta3_MountVolumeResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) ResizeVolume(context context.Context, versionedRequest *v1beta3.ResizeVolumeRequest) (*v1beta3.ResizeVolumeResponse, error) {
	request := &impl.ResizeVolumeRequest{}
	if err := Convert_v1beta3_ResizeVolumeRequest_To_impl_ResizeVolumeRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.ResizeVolume(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta3.ResizeVolumeResponse{}
	if err := Convert_impl_ResizeVolumeResponse_To_v1beta3_ResizeVolumeResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) UnmountVolume(context context.Context, versionedRequest *v1beta3.UnmountVolumeRequest) (*v1beta3.UnmountVolumeResponse, error) {
	request := &impl.UnmountVolumeRequest{}
	if err := Convert_v1beta3_UnmountVolumeRequest_To_impl_UnmountVolumeRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.UnmountVolume(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta3.UnmountVolumeResponse{}
	if err := Convert_impl_UnmountVolumeResponse_To_v1beta3_UnmountVolumeResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) WriteVolumeCache(context context.Context, versionedRequest *v1beta3.WriteVolumeCacheRequest) (*v1beta3.WriteVolumeCacheResponse, error) {
	request := &impl.WriteVolumeCacheRequest{}
	if err := Convert_v1beta3_WriteVolumeCacheRequest_To_impl_WriteVolumeCacheRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.WriteVolumeCache(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta3.WriteVolumeCacheResponse{}
	if err := Convert_impl_WriteVolumeCacheResponse_To_v1beta3_WriteVolumeCacheResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}
