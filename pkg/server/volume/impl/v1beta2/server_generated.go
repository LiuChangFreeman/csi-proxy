// Code generated by csi-proxy-api-gen. DO NOT EDIT.

package v1beta2

import (
	"context"

	"github.com/kubernetes-csi/csi-proxy/client/api/volume/v1beta2"
	"github.com/kubernetes-csi/csi-proxy/client/apiversion"
	"github.com/kubernetes-csi/csi-proxy/pkg/server/volume/impl"
	"google.golang.org/grpc"
)

var version = apiversion.NewVersionOrPanic("v1beta2")

type versionedAPI struct {
	apiGroupServer impl.ServerInterface
}

func NewVersionedServer(apiGroupServer impl.ServerInterface) impl.VersionedAPI {
	return &versionedAPI{
		apiGroupServer: apiGroupServer,
	}
}

func (s *versionedAPI) Register(grpcServer *grpc.Server) {
	v1beta2.RegisterVolumeServer(grpcServer, s)
}

func (s *versionedAPI) DismountVolume(context context.Context, versionedRequest *v1beta2.DismountVolumeRequest) (*v1beta2.DismountVolumeResponse, error) {
	request := &impl.DismountVolumeRequest{}
	if err := Convert_v1beta2_DismountVolumeRequest_To_impl_DismountVolumeRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.DismountVolume(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta2.DismountVolumeResponse{}
	if err := Convert_impl_DismountVolumeResponse_To_v1beta2_DismountVolumeResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) FormatVolume(context context.Context, versionedRequest *v1beta2.FormatVolumeRequest) (*v1beta2.FormatVolumeResponse, error) {
	request := &impl.FormatVolumeRequest{}
	if err := Convert_v1beta2_FormatVolumeRequest_To_impl_FormatVolumeRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.FormatVolume(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta2.FormatVolumeResponse{}
	if err := Convert_impl_FormatVolumeResponse_To_v1beta2_FormatVolumeResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) GetVolumeDiskNumber(context context.Context, versionedRequest *v1beta2.VolumeDiskNumberRequest) (*v1beta2.VolumeDiskNumberResponse, error) {
	request := &impl.VolumeDiskNumberRequest{}
	if err := Convert_v1beta2_VolumeDiskNumberRequest_To_impl_VolumeDiskNumberRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.GetVolumeDiskNumber(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta2.VolumeDiskNumberResponse{}
	if err := Convert_impl_VolumeDiskNumberResponse_To_v1beta2_VolumeDiskNumberResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) GetVolumeIDFromMount(context context.Context, versionedRequest *v1beta2.VolumeIDFromMountRequest) (*v1beta2.VolumeIDFromMountResponse, error) {
	request := &impl.VolumeIDFromMountRequest{}
	if err := Convert_v1beta2_VolumeIDFromMountRequest_To_impl_VolumeIDFromMountRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.GetVolumeIDFromMount(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta2.VolumeIDFromMountResponse{}
	if err := Convert_impl_VolumeIDFromMountResponse_To_v1beta2_VolumeIDFromMountResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) IsVolumeFormatted(context context.Context, versionedRequest *v1beta2.IsVolumeFormattedRequest) (*v1beta2.IsVolumeFormattedResponse, error) {
	request := &impl.IsVolumeFormattedRequest{}
	if err := Convert_v1beta2_IsVolumeFormattedRequest_To_impl_IsVolumeFormattedRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.IsVolumeFormatted(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta2.IsVolumeFormattedResponse{}
	if err := Convert_impl_IsVolumeFormattedResponse_To_v1beta2_IsVolumeFormattedResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) ListVolumesOnDisk(context context.Context, versionedRequest *v1beta2.ListVolumesOnDiskRequest) (*v1beta2.ListVolumesOnDiskResponse, error) {
	request := &impl.ListVolumesOnDiskRequest{}
	if err := Convert_v1beta2_ListVolumesOnDiskRequest_To_impl_ListVolumesOnDiskRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.ListVolumesOnDisk(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta2.ListVolumesOnDiskResponse{}
	if err := Convert_impl_ListVolumesOnDiskResponse_To_v1beta2_ListVolumesOnDiskResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) MountVolume(context context.Context, versionedRequest *v1beta2.MountVolumeRequest) (*v1beta2.MountVolumeResponse, error) {
	request := &impl.MountVolumeRequest{}
	if err := Convert_v1beta2_MountVolumeRequest_To_impl_MountVolumeRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.MountVolume(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta2.MountVolumeResponse{}
	if err := Convert_impl_MountVolumeResponse_To_v1beta2_MountVolumeResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) ResizeVolume(context context.Context, versionedRequest *v1beta2.ResizeVolumeRequest) (*v1beta2.ResizeVolumeResponse, error) {
	request := &impl.ResizeVolumeRequest{}
	if err := Convert_v1beta2_ResizeVolumeRequest_To_impl_ResizeVolumeRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.ResizeVolume(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta2.ResizeVolumeResponse{}
	if err := Convert_impl_ResizeVolumeResponse_To_v1beta2_ResizeVolumeResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) VolumeStats(context context.Context, versionedRequest *v1beta2.VolumeStatsRequest) (*v1beta2.VolumeStatsResponse, error) {
	request := &impl.VolumeStatsRequest{}
	if err := Convert_v1beta2_VolumeStatsRequest_To_impl_VolumeStatsRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.VolumeStats(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta2.VolumeStatsResponse{}
	if err := Convert_impl_VolumeStatsResponse_To_v1beta2_VolumeStatsResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) WriteVolumeCache(context context.Context, versionedRequest *v1beta2.WriteVolumeCacheRequest) (*v1beta2.WriteVolumeCacheResponse, error) {
	request := &impl.WriteVolumeCacheRequest{}
	if err := Convert_v1beta2_WriteVolumeCacheRequest_To_impl_WriteVolumeCacheRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.WriteVolumeCache(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta2.WriteVolumeCacheResponse{}
	if err := Convert_impl_WriteVolumeCacheResponse_To_v1beta2_WriteVolumeCacheResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}
