// Code generated by csi-proxy-api-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"

	"github.com/kubernetes-csi/csi-proxy/client/api/volume/v1alpha1"
	"github.com/kubernetes-csi/csi-proxy/client/apiversion"
	"github.com/kubernetes-csi/csi-proxy/pkg/server/volume/impl"
	"google.golang.org/grpc"
)

var version = apiversion.NewVersionOrPanic("v1alpha1")

type versionedAPI struct {
	apiGroupServer impl.ServerInterface
}

func NewVersionedServer(apiGroupServer impl.ServerInterface) impl.VersionedAPI {
	return &versionedAPI{
		apiGroupServer: apiGroupServer,
	}
}

func (s *versionedAPI) Register(grpcServer *grpc.Server) {
	v1alpha1.RegisterVolumeServer(grpcServer, s)
}

func (s *versionedAPI) DismountVolume(context context.Context, versionedRequest *v1alpha1.DismountVolumeRequest) (*v1alpha1.DismountVolumeResponse, error) {
	request := &impl.DismountVolumeRequest{}
	if err := Convert_v1alpha1_DismountVolumeRequest_To_impl_DismountVolumeRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.DismountVolume(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1alpha1.DismountVolumeResponse{}
	if err := Convert_impl_DismountVolumeResponse_To_v1alpha1_DismountVolumeResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) FormatVolume(context context.Context, versionedRequest *v1alpha1.FormatVolumeRequest) (*v1alpha1.FormatVolumeResponse, error) {
	request := &impl.FormatVolumeRequest{}
	if err := Convert_v1alpha1_FormatVolumeRequest_To_impl_FormatVolumeRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.FormatVolume(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1alpha1.FormatVolumeResponse{}
	if err := Convert_impl_FormatVolumeResponse_To_v1alpha1_FormatVolumeResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) IsVolumeFormatted(context context.Context, versionedRequest *v1alpha1.IsVolumeFormattedRequest) (*v1alpha1.IsVolumeFormattedResponse, error) {
	request := &impl.IsVolumeFormattedRequest{}
	if err := Convert_v1alpha1_IsVolumeFormattedRequest_To_impl_IsVolumeFormattedRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.IsVolumeFormatted(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1alpha1.IsVolumeFormattedResponse{}
	if err := Convert_impl_IsVolumeFormattedResponse_To_v1alpha1_IsVolumeFormattedResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) ListVolumesOnDisk(context context.Context, versionedRequest *v1alpha1.ListVolumesOnDiskRequest) (*v1alpha1.ListVolumesOnDiskResponse, error) {
	request := &impl.ListVolumesOnDiskRequest{}
	if err := Convert_v1alpha1_ListVolumesOnDiskRequest_To_impl_ListVolumesOnDiskRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.ListVolumesOnDisk(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1alpha1.ListVolumesOnDiskResponse{}
	if err := Convert_impl_ListVolumesOnDiskResponse_To_v1alpha1_ListVolumesOnDiskResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) MountVolume(context context.Context, versionedRequest *v1alpha1.MountVolumeRequest) (*v1alpha1.MountVolumeResponse, error) {
	request := &impl.MountVolumeRequest{}
	if err := Convert_v1alpha1_MountVolumeRequest_To_impl_MountVolumeRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.MountVolume(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1alpha1.MountVolumeResponse{}
	if err := Convert_impl_MountVolumeResponse_To_v1alpha1_MountVolumeResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) ResizeVolume(context context.Context, versionedRequest *v1alpha1.ResizeVolumeRequest) (*v1alpha1.ResizeVolumeResponse, error) {
	request := &impl.ResizeVolumeRequest{}
	if err := Convert_v1alpha1_ResizeVolumeRequest_To_impl_ResizeVolumeRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.ResizeVolume(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1alpha1.ResizeVolumeResponse{}
	if err := Convert_impl_ResizeVolumeResponse_To_v1alpha1_ResizeVolumeResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}
