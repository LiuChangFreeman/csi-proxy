// Code generated by csi-proxy-api-gen. DO NOT EDIT.

package v1beta3

import (
	"context"

	"github.com/kubernetes-csi/csi-proxy/client/api/disk/v1beta3"
	"github.com/kubernetes-csi/csi-proxy/client/apiversion"
	"github.com/kubernetes-csi/csi-proxy/internal/server/disk/internal"
	"google.golang.org/grpc"
)

var version = apiversion.NewVersionOrPanic("v1beta3")

type versionedAPI struct {
	apiGroupServer internal.ServerInterface
}

func NewVersionedServer(apiGroupServer internal.ServerInterface) internal.VersionedAPI {
	return &versionedAPI{
		apiGroupServer: apiGroupServer,
	}
}

func (s *versionedAPI) Register(grpcServer *grpc.Server) {
	v1beta3.RegisterDiskServer(grpcServer, s)
}

func (s *versionedAPI) DiskStats(context context.Context, versionedRequest *v1beta3.DiskStatsRequest) (*v1beta3.DiskStatsResponse, error) {
	request := &internal.DiskStatsRequest{}
	if err := Convert_v1beta3_DiskStatsRequest_To_internal_DiskStatsRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.DiskStats(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta3.DiskStatsResponse{}
	if err := Convert_internal_DiskStatsResponse_To_v1beta3_DiskStatsResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) GetAttachState(context context.Context, versionedRequest *v1beta3.GetAttachStateRequest) (*v1beta3.GetAttachStateResponse, error) {
	request := &internal.GetAttachStateRequest{}
	if err := Convert_v1beta3_GetAttachStateRequest_To_internal_GetAttachStateRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.GetAttachState(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta3.GetAttachStateResponse{}
	if err := Convert_internal_GetAttachStateResponse_To_v1beta3_GetAttachStateResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) ListDiskIDs(context context.Context, versionedRequest *v1beta3.ListDiskIDsRequest) (*v1beta3.ListDiskIDsResponse, error) {
	request := &internal.ListDiskIDsRequest{}
	if err := Convert_v1beta3_ListDiskIDsRequest_To_internal_ListDiskIDsRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.ListDiskIDs(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta3.ListDiskIDsResponse{}
	if err := Convert_internal_ListDiskIDsResponse_To_v1beta3_ListDiskIDsResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) ListDiskLocations(context context.Context, versionedRequest *v1beta3.ListDiskLocationsRequest) (*v1beta3.ListDiskLocationsResponse, error) {
	request := &internal.ListDiskLocationsRequest{}
	if err := Convert_v1beta3_ListDiskLocationsRequest_To_internal_ListDiskLocationsRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.ListDiskLocations(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta3.ListDiskLocationsResponse{}
	if err := Convert_internal_ListDiskLocationsResponse_To_v1beta3_ListDiskLocationsResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) PartitionDisk(context context.Context, versionedRequest *v1beta3.PartitionDiskRequest) (*v1beta3.PartitionDiskResponse, error) {
	request := &internal.PartitionDiskRequest{}
	if err := Convert_v1beta3_PartitionDiskRequest_To_internal_PartitionDiskRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.PartitionDisk(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta3.PartitionDiskResponse{}
	if err := Convert_internal_PartitionDiskResponse_To_v1beta3_PartitionDiskResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) Rescan(context context.Context, versionedRequest *v1beta3.RescanRequest) (*v1beta3.RescanResponse, error) {
	request := &internal.RescanRequest{}
	if err := Convert_v1beta3_RescanRequest_To_internal_RescanRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.Rescan(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta3.RescanResponse{}
	if err := Convert_internal_RescanResponse_To_v1beta3_RescanResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) SetAttachState(context context.Context, versionedRequest *v1beta3.SetAttachStateRequest) (*v1beta3.SetAttachStateResponse, error) {
	request := &internal.SetAttachStateRequest{}
	if err := Convert_v1beta3_SetAttachStateRequest_To_internal_SetAttachStateRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.SetAttachState(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1beta3.SetAttachStateResponse{}
	if err := Convert_internal_SetAttachStateResponse_To_v1beta3_SetAttachStateResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}
