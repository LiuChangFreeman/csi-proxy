// Code generated by csi-proxy-api-gen. DO NOT EDIT.

package v1

import (
	"context"

	v1 "github.com/kubernetes-csi/csi-proxy/client/api/volume/v1"
	"github.com/kubernetes-csi/csi-proxy/client/apiversion"
	"github.com/kubernetes-csi/csi-proxy/internal/server/volume/internal"
	"google.golang.org/grpc"
)

var version = apiversion.NewVersionOrPanic("v1")

type versionedAPI struct {
	apiGroupServer internal.ServerInterface
}

func NewVersionedServer(apiGroupServer internal.ServerInterface) internal.VersionedAPI {
	return &versionedAPI{
		apiGroupServer: apiGroupServer,
	}
}

func (s *versionedAPI) Register(grpcServer *grpc.Server) {
	v1.RegisterVolumeServer(grpcServer, s)
}

func (s *versionedAPI) DismountVolume(context context.Context, versionedRequest *v1.DismountVolumeRequest) (*v1.DismountVolumeResponse, error) {
	request := &internal.DismountVolumeRequest{}
	if err := Convert_v1_DismountVolumeRequest_To_internal_DismountVolumeRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.DismountVolume(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1.DismountVolumeResponse{}
	if err := Convert_internal_DismountVolumeResponse_To_v1_DismountVolumeResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) FormatVolume(context context.Context, versionedRequest *v1.FormatVolumeRequest) (*v1.FormatVolumeResponse, error) {
	request := &internal.FormatVolumeRequest{}
	if err := Convert_v1_FormatVolumeRequest_To_internal_FormatVolumeRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.FormatVolume(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1.FormatVolumeResponse{}
	if err := Convert_internal_FormatVolumeResponse_To_v1_FormatVolumeResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) GetVolumeDiskNumber(context context.Context, versionedRequest *v1.VolumeDiskNumberRequest) (*v1.VolumeDiskNumberResponse, error) {
	request := &internal.VolumeDiskNumberRequest{}
	if err := Convert_v1_VolumeDiskNumberRequest_To_internal_VolumeDiskNumberRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.GetVolumeDiskNumber(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1.VolumeDiskNumberResponse{}
	if err := Convert_internal_VolumeDiskNumberResponse_To_v1_VolumeDiskNumberResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) GetVolumeIDFromMount(context context.Context, versionedRequest *v1.VolumeIDFromMountRequest) (*v1.VolumeIDFromMountResponse, error) {
	request := &internal.VolumeIDFromMountRequest{}
	if err := Convert_v1_VolumeIDFromMountRequest_To_internal_VolumeIDFromMountRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.GetVolumeIDFromMount(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1.VolumeIDFromMountResponse{}
	if err := Convert_internal_VolumeIDFromMountResponse_To_v1_VolumeIDFromMountResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) IsVolumeFormatted(context context.Context, versionedRequest *v1.IsVolumeFormattedRequest) (*v1.IsVolumeFormattedResponse, error) {
	request := &internal.IsVolumeFormattedRequest{}
	if err := Convert_v1_IsVolumeFormattedRequest_To_internal_IsVolumeFormattedRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.IsVolumeFormatted(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1.IsVolumeFormattedResponse{}
	if err := Convert_internal_IsVolumeFormattedResponse_To_v1_IsVolumeFormattedResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) ListVolumesOnDisk(context context.Context, versionedRequest *v1.ListVolumesOnDiskRequest) (*v1.ListVolumesOnDiskResponse, error) {
	request := &internal.ListVolumesOnDiskRequest{}
	if err := Convert_v1_ListVolumesOnDiskRequest_To_internal_ListVolumesOnDiskRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.ListVolumesOnDisk(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1.ListVolumesOnDiskResponse{}
	if err := Convert_internal_ListVolumesOnDiskResponse_To_v1_ListVolumesOnDiskResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) MountVolume(context context.Context, versionedRequest *v1.MountVolumeRequest) (*v1.MountVolumeResponse, error) {
	request := &internal.MountVolumeRequest{}
	if err := Convert_v1_MountVolumeRequest_To_internal_MountVolumeRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.MountVolume(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1.MountVolumeResponse{}
	if err := Convert_internal_MountVolumeResponse_To_v1_MountVolumeResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) ResizeVolume(context context.Context, versionedRequest *v1.ResizeVolumeRequest) (*v1.ResizeVolumeResponse, error) {
	request := &internal.ResizeVolumeRequest{}
	if err := Convert_v1_ResizeVolumeRequest_To_internal_ResizeVolumeRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.ResizeVolume(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1.ResizeVolumeResponse{}
	if err := Convert_internal_ResizeVolumeResponse_To_v1_ResizeVolumeResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) VolumeStats(context context.Context, versionedRequest *v1.VolumeStatsRequest) (*v1.VolumeStatsResponse, error) {
	request := &internal.VolumeStatsRequest{}
	if err := Convert_v1_VolumeStatsRequest_To_internal_VolumeStatsRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.VolumeStats(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1.VolumeStatsResponse{}
	if err := Convert_internal_VolumeStatsResponse_To_v1_VolumeStatsResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) WriteVolumeCache(context context.Context, versionedRequest *v1.WriteVolumeCacheRequest) (*v1.WriteVolumeCacheResponse, error) {
	request := &internal.WriteVolumeCacheRequest{}
	if err := Convert_v1_WriteVolumeCacheRequest_To_internal_WriteVolumeCacheRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.WriteVolumeCache(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1.WriteVolumeCacheResponse{}
	if err := Convert_internal_WriteVolumeCacheResponse_To_v1_WriteVolumeCacheResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}
