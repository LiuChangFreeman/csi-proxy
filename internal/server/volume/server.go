package volume

import (
	"context"
	"fmt"

	"github.com/kubernetes-csi/csi-proxy/client/apiversion"
	"github.com/kubernetes-csi/csi-proxy/internal/os/volume"
	"github.com/kubernetes-csi/csi-proxy/internal/server/volume/internal"
	"k8s.io/klog/v2"
)

// Server wraps the host API and implements the autogenerated server interface
type Server struct {
	hostAPI volume.API
}

func NewServer(hostAPI volume.API) (*Server, error) {
	return &Server{
		hostAPI: hostAPI,
	}, nil
}

func (s *Server) ListVolumesOnDisk(context context.Context, request *internal.ListVolumesOnDiskRequest, version apiversion.Version) (*internal.ListVolumesOnDiskResponse, error) {
	klog.V(5).Infof("ListVolumesOnDisk: Request: %+v", request)
	response := &internal.ListVolumesOnDiskResponse{}

	diskNumber := request.DiskNumber
	if diskNumber < 0 {
		klog.Errorf("disk number is invalid")
		return response, fmt.Errorf("ListVolumesOnDiskRequest.DiskNumber is invalid")
	}
	volumeIDs, err := s.hostAPI.ListVolumesOnDisk(diskNumber)
	if err != nil {
		klog.Errorf("failed ListVolumeOnDisk %v", err)
		return response, err
	}

	response.VolumeIds = volumeIDs
	return response, nil
}

func (s *Server) MountVolume(context context.Context, request *internal.MountVolumeRequest, version apiversion.Version) (*internal.MountVolumeResponse, error) {
	klog.V(5).Infof("MountVolume: Request: %+v", request)
	response := &internal.MountVolumeResponse{}

	volumeID := request.VolumeId
	if volumeID == "" {
		klog.Errorf("volume id empty")
		return response, fmt.Errorf("volume id empty")
	}
	targetPath := request.TargetPath
	if targetPath == "" {
		klog.Errorf("targetPath empty")
		return response, fmt.Errorf("MountVolumeRequest.TargetPath empty")
	}

	err := s.hostAPI.MountVolume(volumeID, targetPath)
	if err != nil {
		klog.Errorf("failed MountVolume %v", err)
		return response, err
	}
	return response, nil
}

func (s *Server) DismountVolume(context.Context, *internal.DismountVolumeRequest, apiversion.Version) (*internal.DismountVolumeResponse, error) {
	return nil, fmt.Errorf("DismountVolume is deprecated, use UnmountVolume")
}

func (s *Server) UnmountVolume(context context.Context, request *internal.UnmountVolumeRequest, version apiversion.Version) (*internal.UnmountVolumeResponse, error) {
	klog.V(5).Infof("UnmountVolume: Request: %+v", request)
	response := &internal.UnmountVolumeResponse{}

	volumeID := request.VolumeId
	if volumeID == "" {
		klog.Errorf("volume id empty")
		return response, fmt.Errorf("volume id empty")
	}
	targetPath := request.TargetPath
	if targetPath == "" {
		klog.Errorf("mount target path empty")
		return response, fmt.Errorf("mount target path empty")
	}
	err := s.hostAPI.UnmountVolume(volumeID, targetPath)
	if err != nil {
		klog.Errorf("failed UnmountVolume %v", err)
		return response, err
	}
	return response, nil
}

func (s *Server) IsVolumeFormatted(context context.Context, request *internal.IsVolumeFormattedRequest, version apiversion.Version) (*internal.IsVolumeFormattedResponse, error) {
	klog.V(4).Infof("calling IsVolumeFormatted with request: %+v", request)
	response := &internal.IsVolumeFormattedResponse{}

	volumeID := request.VolumeId
	if volumeID == "" {
		klog.Errorf("volume id empty")
		return response, fmt.Errorf("volume id empty")
	}
	isFormatted, err := s.hostAPI.IsVolumeFormatted(volumeID)
	if err != nil {
		klog.Errorf("failed IsVolumeFormatted %v", err)
		return response, err
	}
	klog.V(5).Infof("IsVolumeFormatted: return: %v", isFormatted)
	response.Formatted = isFormatted
	return response, nil
}

func (s *Server) FormatVolume(context context.Context, request *internal.FormatVolumeRequest, version apiversion.Version) (*internal.FormatVolumeResponse, error) {
	klog.V(4).Infof("calling FormatVolume with request: %+v", request)
	response := &internal.FormatVolumeResponse{}

	volumeID := request.VolumeId
	if volumeID == "" {
		klog.Errorf("volume id empty")
		return response, fmt.Errorf("volume id empty")
	}

	err := s.hostAPI.FormatVolume(volumeID)
	if err != nil {
		klog.Errorf("failed FormatVolume %v", err)
		return response, err
	}
	return response, nil
}

func (s *Server) WriteVolumeCache(context context.Context, request *internal.WriteVolumeCacheRequest, version apiversion.Version) (*internal.WriteVolumeCacheResponse, error) {
	klog.V(4).Infof("calling WriteVolumeCache with request: %+v", request)
	response := &internal.WriteVolumeCacheResponse{}

	volumeID := request.VolumeId
	if volumeID == "" {
		klog.Errorf("volume id empty")
		return response, fmt.Errorf("volume id empty")
	}

	err := s.hostAPI.WriteVolumeCache(volumeID)
	if err != nil {
		klog.Errorf("failed WriteVolumeCache %v", err)
		return response, err
	}
	return response, nil
}

func (s *Server) ResizeVolume(context context.Context, request *internal.ResizeVolumeRequest, version apiversion.Version) (*internal.ResizeVolumeResponse, error) {
	klog.V(4).Infof("calling ResizeVolume with request: %+v", request)
	response := &internal.ResizeVolumeResponse{}

	volumeID := request.VolumeId
	if volumeID == "" {
		klog.Errorf("volume id empty")
		return response, fmt.Errorf("volume id empty")
	}
	sizeBytes := request.SizeBytes
	// TODO : Validate size param

	err := s.hostAPI.ResizeVolume(volumeID, sizeBytes)
	if err != nil {
		klog.Errorf("failed ResizeVolume %v", err)
		return response, err
	}
	return response, nil
}

func (s *Server) VolumeStats(context context.Context, request *internal.VolumeStatsRequest, version apiversion.Version) (*internal.VolumeStatsResponse, error) {
	return nil, fmt.Errorf("DismountVolume is deprecated, use UnmountVolume")
}

func (s *Server) GetVolumeStats(context context.Context, request *internal.GetVolumeStatsRequest, version apiversion.Version) (*internal.GetVolumeStatsResponse, error) {
	klog.V(4).Infof("calling VolumeStats with request: %+v", request)
	minimumVersion := apiversion.NewVersionOrPanic("v1beta1")
	if version.Compare(minimumVersion) < 0 {
		return nil, fmt.Errorf("VolumeStats requires CSI-Proxy API version v1beta1 or greater")
	}

	volumeId := request.VolumeId
	if volumeId == "" {
		return nil, fmt.Errorf("volume id empty")
	}

	totalBytes, usedBytes, err := s.hostAPI.GetVolumeStats(request.VolumeId)

	if err != nil {
		klog.Errorf("failed VolumeStats %v", err)
		return nil, err
	}

	klog.V(5).Infof("VolumeStats: returned: Capacity %v Used %v", totalBytes, usedBytes)

	response := &internal.GetVolumeStatsResponse{
		TotalBytes: totalBytes,
		UsedBytes:  usedBytes,
	}

	return response, nil
}

func (s *Server) GetVolumeDiskNumber(context context.Context, request *internal.VolumeDiskNumberRequest, version apiversion.Version) (*internal.VolumeDiskNumberResponse, error) {
	return nil, fmt.Errorf("GetVolumeDiskNumber is deprecated, use GetDiskNumberFromVolumeID")
}

func (s *Server) GetDiskNumberFromVolumeID(context context.Context, request *internal.GetDiskNumberFromVolumeIDRequest, version apiversion.Version) (*internal.GetDiskNumberFromVolumeIDResponse, error) {
	klog.V(4).Infof("calling GetVolumeDiskNumber with request %+v", request)
	minimumVersion := apiversion.NewVersionOrPanic("v1beta1")
	if version.Compare(minimumVersion) < 0 {
		return nil, fmt.Errorf("VolumeDiskNumber requires CSI-Proxy API version v1beta1 or greater")
	}

	volumeId := request.VolumeId
	if volumeId == "" {
		return nil, fmt.Errorf("volume id empty")
	}

	diskNumber, err := s.hostAPI.GetDiskNumberFromVolumeID(volumeId)
	if err != nil {
		klog.Errorf("failed GetVolumeDiskNumber %v", err)
		return nil, err
	}

	response := &internal.GetDiskNumberFromVolumeIDResponse{
		DiskNumber: diskNumber,
	}

	return response, nil
}

func (s *Server) GetVolumeIDFromMount(context context.Context, request *internal.VolumeIDFromMountRequest, version apiversion.Version) (*internal.VolumeIDFromMountResponse, error) {
	return nil, fmt.Errorf("GetVolumeIDFromMount is deprecated, use GetVolumeIDFromTargetPath")
}

func (s *Server) GetVolumeIDFromTargetPath(context context.Context, request *internal.GetVolumeIDFromTargetPathRequest, version apiversion.Version) (*internal.GetVolumeIDFromTargetPathResponse, error) {
	klog.V(4).Infof("calling GetVolumeFromMount with request %+v", request)
	minimumVersion := apiversion.NewVersionOrPanic("v1beta1")
	if version.Compare(minimumVersion) < 0 {
		return nil, fmt.Errorf("GetVolumeFromMount requires CSI-Proxy API version v1beta1 or greater")
	}

	targetPath := request.TargetPath
	if targetPath == "" {
		return nil, fmt.Errorf("target path is empty")
	}

	volume, err := s.hostAPI.GetVolumeIDFromTargetPath(targetPath)
	if err != nil {
		klog.Errorf("failed GetVolumeFromMount %v", err)
		return nil, err
	}

	response := &internal.GetVolumeIDFromTargetPathResponse{
		VolumeId: volume,
	}

	return response, nil
}
